CMAKE_MINIMUM_REQUIRED( VERSION 2.8 )

PROJECT( EBF )

SET(CMAKE_BUILE_TYPE RELEASE) 

FIND_PACKAGE(OpenMP) 
if (OPENMP_FOUND) 
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
endif (OPENMP_FOUND)


IF(MSVC_IDE)
  ADD_DEFINITIONS(/arch:SSE2)
  SET(OpenCV_STATIC OFF)
  ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS)
  ADD_DEFINITIONS(-DUSING_CMAKE=1)
ENDIF(MSVC_IDE)

IF(CMAKE_COMPILER_IS_GNUCXX)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wno-strict-aliasing")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wextra -Wno-write-strings")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-deprecated -ansi")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3 -ftree-vectorize -funroll-loops")
  add_definitions(-std=c++0x)
ENDIF(CMAKE_COMPILER_IS_GNUCXX)


SET( EXECUTABLE_OUTPUT_PATH  ${PROJECT_SOURCE_DIR}/bin )
SET( LIBRARY_OUTPUT_PATH  ${PROJECT_SOURCE_DIR}/lib )
LINK_DIRECTORIES( ${PROJECT_SOURCE_DIR}/lib )
INCLUDE_DIRECTORIES( ${PROJECT_SOURCE_DIR}/include )


# SET OPENCV REQUIRED
SET( CMAKE_PREFIX_PATH  ${CMAKE_PREFIX_PATH}  /SDK/OpenCV2/ )
if(MSVC)
SET( CMAKE_PREFIX_PATH  ${CMAKE_PREFIX_PATH} C:/SDK/OpenCV/ )
INCLUDE_DIRECTORIES( C:/SDK/Eigen3 )
ENDIF(MSVC)

FIND_PACKAGE( OpenCV REQUIRED )


# SET OPENCV REQUIRED

IF(CMAKE_COMPILER_IS_GNUCXX)
    INCLUDE_DIRECTORIES( /SDK/Eigen3 )
ENDIF(CMAKE_COMPILER_IS_GNUCXX)

ADD_SUBDIRECTORY( ./src )


